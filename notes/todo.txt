Next
- Fix eslint type errors after upgrading

- Get typescript-eslint building locally
- Get it working with peerDependencies
- Get server rendering working
  - Switch off js x
  - Server render initial page x
  - Get img path working
    - Setup webpack config for worker: https://developers.cloudflare.com/workers/wrangler/cli-wrangler/webpack/
    https://developers.cloudflare.com/workers/wrangler/configuration/
    - If you can't get it working easily enough, just get it working with node and move on
  - Get css styles working
  - Wrap entire UI in a form
  - All actions are links with query params for actions
  - State is stored in a form?
    <form>
      <button type="submit" value="{ count: 1 }">Click</button>
    </form>

- Replace client/server in useRoute and all app.request with a generic request function

- Drive the front end using curl requests
- Test loading bar
  loading && { component: 'LoadingBar' }
  https://github.com/klendi/react-top-loading-bar
- See if setRoute can be moved to routes.tsx
- Pending actions
  - Avoid duplicate requests when interacting
- Write a request module, that handles communication and requires handling these types:
https://youtu.be/NLcRzOyrH08?t=758

- Add typing for action payloads
- Do a document explaining how the client side server/api works

- Create a version that works with a machine: feature/machine
  - Make adding/removing posts go via the api and take 1s

- Make a version of send that works with the server
  - Hits API
  - API updates server store
  - Returns response
  - Send then hits the route
  - Don't worry about loading states, it should just wait

- Write your own minimal hono library to allow sub 1ms click update
  - currently it's 2-3ms, w/o the async call it's .1-.5ms
- Write your own minimal zod library to avoid the large bloat

- Remove sections and components, just use an array
- Create a time travel debugger down the bottom
  - Debugger component that can be dropped in to any route

- hono on the client?

- Setup db/store object and req obj for each route

- Instead of actions living in the route
  - UI calls API
  - The api updates the global db and responds
  - UI requests new json once request completes
    - Each route has access to req, db, user
  - See if you can Hono to work locally as well as server
  - Each route should get req, db, user
    - req: hono req
    - db: all state stored in memory
    - user: user data
  - Server
    - routes
    - components  



- Render a second page with the prev routes posts

  Some options:
  - Current route calls nextRoute with appropriate state, which then calls onEnter
  - onEnter has access to state
  - Global store

- Array support for routes names ['', '/']
- Server render / and add to readme (client and server rendering)
- Use a machine instead of reducer

Then
- Add error boundary
- File typescript bug for object spread

- Write an eslint plugin to require a catch block for async
- Add type builder for hono

- Allow actions
- Allow using machines
- Ability to go from update -> createMachine

- Front end deploy to pages
- Server deploy to workers


V2
- Write a client router that behaves the same way as hono, currently it takes .3-.5ms to respond
- Rewrite types from scratch


- Setup time travel debugging
- Add a check for combining reducers, making sure duplicate actions aren't used
- Ability to create sub routes
  - Essentially I can break out an existing route, create a new one and have it be used
    - I will have to think about how this would work with send
    - Either via passing the prop to the component, or potentially having sub routes via the url, that then direct where they are sent
      /home
      /home/posts
  - Ability to createRenderer in render function

Later
- Setup node vite plugin so node updates trigger a hot module reload
- Try miniflare instead of wrangler? Or just wait until js api is supported in wrangler
https://github.com/cloudflare/miniflare
https://github.com/cloudflare/wrangler2/issues/771
