Client side server for store - What's cool about this approach
- No stores/reducers
  - Just api requests
- I can type it all fully
- I can test and potentially drive UI with post requests

Folder structure
- src
  - html (maybe replace these with public?)
  - img
  - app
    - store: zustand store
    - routes
    - sections
    - containers (non-presentational)
    - components (presentational)
    - groups: grouping of elements that are re-used in components (presentational)
    - elements (presentational)
    - utils


- Get it working with basic fetch and event emitter
- Then machine

Routing
Option 1: SDUI
- All routes are rendered by default
- clicking on something is like clicking on a link
  - Route automatically requests next route
  - Could use service workers or not
- Use server push to update UI

Option 2: new-architecture
- createRoute
  - Every interaction goes through route
  - Uses xstate to handle the states, requests
  - Could use service workers or not



Example machine code
if (service.state.posts === null && service.state.idle) {
  service.send('fetch', '/api/posts');
  // service.onTransition(state => {
  //   // on: event success, update route
  //   // if(state === 'idle'){
  //   // }
  // })
}

const machine = fsm(fetchChart, { posts: [] });
machine.on({
  state: 'idle',
  event: 'fetch',
}, () => {
  
})
// machine.on({
//   state: 'loading',
//   event: 'success',
// }, (context) => {
//   assign({ posts: context.posts });
// })
// machine.on('fetch', () => {
//   // assign()
// });


// const fetchChart = (
//   <>
//     <State id="idle">
//       <Transition event="fetch" to="loading" />
//     </State>
//     <State id="loading">
//       <Transition event="success" to="idle" />
//       <Transition event="error" to="error" />
//     </State>
//     <State id="error">
//       <Transition event="idle" to="idle" />
//     </State>
//   </>
// );
